@require: coins/report
@require: enumitem/enumitem
@require: bibyfi/bibyfi
@require: bibyfi/bibyfi-IEEETran
@import: ../bib

let bibyfi-theme = BiByFiIEEETran.theme (|
    name-shrink = false;
    et-al = false;
    journal-abbr = [(`European Association for Signal Processing`, `EUSIPCO`)];
  |)
in
open EnumitemAlias in
document(|
  author = {Masaki Nakano};
  department = {情報科学};
  en = false;
  id = 202013553;
  faculty = {情報};
  title = {分散ファイルシステム};
|) '<
  +chapter ?:(`distfs`) ?:(`distfs`) ?:(2) {分散ファイルシステム}<
    +section{設計}<
      +p{
        \code(`fuse`);の低レベルプロトコルを\code(`libc`);の関数及び
        Rustの非同期ランタイムである\code(`tokio`);のファイル操作に対応させる形で実装を行った。
        クライアント側は\code(`fuse`);の低レベル関数を直接RPCに変換し、
        サーバー側で実際の処理を行なっている。
      }
      +p{
        RPCは非同期実行をサポートしているので複数アプリケーションがfuseの提供するファイルシステム内で動作した場合でも
        速度の低下を抑える事が出来る。
      }
      +p{
        サーバー側でルートディレクトリとなるディレクトリを指定し、
        クライアント側からのリクエストに含まれるパスを検査し変換することで
        ルート外へのアクセスを防ぐ。
      }
      +p{
        \code(`open`);、\code(`opendir`);のようにハンドルを用意しその後ハンドルを用いて操作する
        APIはハンドルの実態を連想配列に記録する。
        その際のキーは\code(`uint64_t`);をアトミック操作でインクリメントすることでユニークなキーを生成する。
      }
    >
    +section{実装}<
      +p{
        RPCにはgRPCを使った。
        fuseのライブラリは非同期IOをサポートしていることから\code(`fuse3`);を利用した。
      }
      +listing{
        * \code(`lookup`);
          ** \code(`tokio`);により非同期IOでファイルメタデータを取得して返す
        * \code(`getattr`);
          ** \code(`lookup`);と同様
          ** \code(`tokio`);により非同期IOでファイルメタデータを取得して返す
        * \code(`setattr`);
          ** \code(`tokio`);及び標準ライブラリでは操作が提供されていないため外部のライブラリを導入して同期的に処理
        * \code(`mkdir`);
          ** \code(`tokio`);により操作が提供されているものの、パーミッションの設定を同時に行えないため\code(`unistd`);のラッパーを利用
        * \code(`unlink`);
          ** \code(`tokio`);により操作が提供されていないため、\code(`unistd`);のラッパーを利用
        * \code(`symlink`);
          ** \code(`tokio`);のものを利用
        * \code(`rmdir`);
          ** \code(`tokio`);のものを利用
        * \code(`rename`);
          ** \code(`tokio`);のものを利用
        * \code(`opendir`);
          ** \code(`tokio`);のものを利用した。
          ** ハンドルの取得とエントリの取得は分離可能ではあるものの、別のスレッドに飛ばせないためopen時にエントリを取得している
          ** 取得したエントリは連想配列に格納
        * \code(`releasedir`);
          ** 連想配列から該当するエントリを削除する
        * \code(`readdir`);
          ** \code(`opendir`);により取得されたエントリを連想配列にアクセスして取得。offsetに応じて返却する
        * \code(`open`);
          ** \code(`tokio`);のものを利用
          ** ファイル構造体を連想配列に格納する
          ** Open時のモードは反映するが\code(`O_DIRECT`);などのオプションは対応する機能がないため無視している
        * \code(`read`);
          ** \code(`tokio`);のものを利用。
          ** \code(`open`);で格納した\code(`tokio`);のハンドル経由でアクセス
          ** 一部のアプリケーションは読み取られたバイト数が${0}になったことで読み取りを終了せず、
            バッファより少ないバイト数を読んだことで読み取りを終了するためバッファが埋まるまで\code(`read`);を実行してバッファが埋まるか読み取れなくなるまで
            読んでからRPCを返している。
        * \code(`write`);
          ** \code(`tokio`);のものを利用。
          ** \code(`open`);で格納した\code(`tokio`);のハンドル経由でアクセス
      }
    >
    +section{動作確認}<
      +p{
        このリポジトリをサーバでルートとして設定し、マウント。
        \code(`fish`);、\code(`sh`);でアクセスし、\code(`coreutils`);で\code(`mkdir`);、\code(`rm`);、\code(`cat`);、リダイレクトによる書き込み、\code(`vim`);による編集をテストした。
        また、\code(`cargo`);により分散ファイルシステム経由で自身のビルドを行った。
      }
    >
    +section{感想}<
      +p{
        fuseのAPIはLinuxのVFS層のものに近いが、LinuxのシステムコールはVFS層と異なり
        inodeではなくパスベースで操作を行う。
        実装には\code(`fuse3`);のパスベース操作で実装出来るラッパーを用いたが
        遠隔からの操作を過不足なくLinuxのファイルシステムへの操作へ変換するのは不可能だと感じた。
        また、OSによってファイルシステムへの操作には差異が出る。
        Dropbox社のファイル同期エンジンの開発ブログでも触れられていたが、
        多様なRPCをサポートするほどOS間の差異に苦しむだろうと感じた。
      }
      +p{
        Linuxのようにモノリシックカーネルであったり、VFSに直接アクセス出来ないOSでは
        分散ファイルシステムの実装は程度の差はあれ妥協が必要だろうが、
        マイクロカーネルでそもそもファイルシステムへのアクセスがサーバ・クライアントモデル型になっているならば
        実装は容易かもしれない。
      }
      +p{
        実装後に9Pプロトコルを思い出した。
        こちらで実装した方が簡潔であるし、fuse以外でも利用出来て便利だったと思う。
      }
    >
    +appendix {参考文献} <
      +makebibliography ?:(|sort-references=true; citestyle=CiteAsNumber; name-shrink=false;|) (bibyfi-theme)(bibs);
    >
  >
>